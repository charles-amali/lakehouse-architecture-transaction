{
    "Comment": "Lakehouse Architecture for E-Commerce Transactions",
    "StartAt": "Glue StartJobRun",
    "States": {
      "Glue StartJobRun": {
        "Type": "Task",
        "Resource": "arn:aws:states:::glue:startJobRun.sync",
        "Parameters": {
          "JobName": "Delta-lake-job"
        },
        "Next": "StartCrawler",
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "Failed Message"
          }
        ]
      },
      "StartCrawler": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
        "Parameters": {
          "Name": "delta_crawler"
        },
        "Next": "WaitForCrawler"
      },
      "WaitForCrawler": {
        "Type": "Wait",
        "Seconds": 35,
        "Next": "CheckCrawlerStatus"
      },
      "CheckCrawlerStatus": {
        "Type": "Task",
        "Resource": "arn:aws:states:::aws-sdk:glue:getCrawler",
        "Parameters": {
          "Name": "delta_crawler"
        },
        "Next": "IsCrawlingComplete"
      },
      "IsCrawlingComplete": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.Crawler.State",
            "StringEquals": "READY",
            "Next": "Parallel"
          },
          {
            "Variable": "$.Crawler.State",
            "StringEquals": "STOPPING",
            "Next": "Parallel"
          }
        ],
        "Default": "WaitForCrawler"
      },
      "Parallel": {
        "Type": "Parallel",
        "Next": "Archive Files",
        "Branches": [
          {
            "StartAt": "RunTestQueriesOrders",
            "States": {
              "RunTestQueriesOrders": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:athena:startQueryExecution",
                "Parameters": {
                  "QueryString": "SELECT * FROM orders WHERE order_date = '2025-04-08' LIMIT 10",
                  "QueryExecutionContext": {
                    "Database": "delta_db"
                  },
                  "ResultConfiguration": {
                    "OutputLocation": "s3://delta-lake-bkt01/athena_queries/"
                  }
                },
                "End": true
              }
            }
          },
          {
            "StartAt": "RunTestQueriesOrderItems",
            "States": {
              "RunTestQueriesOrderItems": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:athena:startQueryExecution",
                "Parameters": {
                  "QueryString": "SELECT * FROM order_items LIMIT 10",
                  "QueryExecutionContext": {
                    "Database": "delta_db"
                  },
                  "ResultConfiguration": {
                    "OutputLocation": "s3://delta-lake-bkt01/athena_queries/"
                  }
                },
                "End": true
              }
            }
          },
          {
            "StartAt": "RunTestQueriesProducts",
            "States": {
              "RunTestQueriesProducts": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:athena:startQueryExecution",
                "Parameters": {
                  "QueryString": "SELECT * FROM products LIMIT 10",
                  "QueryExecutionContext": {
                    "Database": "delta_db"
                  },
                  "ResultConfiguration": {
                    "OutputLocation": "s3://delta-lake-bkt01/athena_queries/"
                  }
                },
                "End": true
              }
            }
          }
        ]
      },
      "Archive Files": {
        "Type": "Task",
        "Resource": "arn:aws:lambda:us-east-1:724772083049:function:archive_files",
        "Parameters": {
          "bucket": "delta-lake-bkt01",
          "source_prefix": "processed/",
          "destination_prefix": "archive/processed-data/"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "Succeed Message"
      },
      "Failed Message": {
        "Type": "Task",
        "Resource": "arn:aws:states:::sns:publish",
        "Parameters": {
          "TopicArn": "arn:aws:sns:us-east-1:724772083049:delta-lake",
          "Message": {
            "Status": "Failed",
            "Machine": "lakehouse_state_machine",
            "ExecutionId.$": "$$.Execution.Id",
            "Timestamp.$": "$$.State.EnteredTime"
          },
          "Subject": "State Machine Execution Failed "
        },
        "End": true
      },
      "Succeed Message": {
        "Type": "Task",
        "Resource": "arn:aws:states:::sns:publish",
        "Parameters": {
          "TopicArn": "arn:aws:sns:us-east-1:724772083049:delta-lake",
          "Message": {
            "Status": "SUCCESS",
            "Machine": "lakehouse_state_machine",
            "ExecutionId.$": "$$.Execution.Id",
            "Timestamp.$": "$$.State.EnteredTime"
          },
          "Subject": "State Machine Execution Succeeded"
        },
        "End": true
      }
    }
  }